unit csvreader;
{$IFDEF FPC}
{$mode objfpc}{$H+}
 {$ModeSwitch advancedrecords}
{$ENDIF}
interface

uses
{$IFDEF FPC}
 Classes,SysUtils, ObjectHash,strUtils;
{$ELSE}
  System.Classes,ObjectHash, System.IniFiles, system.SysUtils, System.StrUtils;
{$ENDIF}
const
  DEFAULT_BUFFER_SIZE=1024*1024; //默认512k
type
  TRowIndexRec=packed record
    RowPosition:int64;
  end;
  TRowIndexArr=array of TRowIndexRec;

  PCsvDataItem=^TCsvDataItem;

  { TCsvDataItem }

  TCsvDataItem=packed record
    PS:PAnsiChar;
    PE:PAnsiChar;
  public
    function AsRawString: RawByteString;
    function AsUtf8: UTF8String;
  end;
  TCSVDataRow=array of TCsvDataItem;
  TCode=(cUnknown,cAuto,cAnsi,cUnicode16LE,cUnicode16BE,cUtf8);
  TRowState=(rStart,rLEnd);
  TColState=(colStart,colEnd,cLEnd);
  TColumnItem = class(TCollectionItem)
  strict private
  private
    FCol: Integer;
    FColumnName: string;
    FPCsvColData: PCsvDataItem;
    procedure SetPCsvColData(const Value: PCsvDataItem);
  protected
  public
    property Col: Integer read FCol write FCol;
    property ColumnName: string read FColumnName write FColumnName;
    property PCsvColData: PCsvDataItem read FPCsvColData write SetPCsvColData;
  end;
  TColumns = class(TCollection)
  private
    FHash: TObjectHash;
    function GetColumnItem(Index: Integer): TColumnItem;
  public
    constructor Create(AItemClass: TCollectionItemClass);
    destructor Destroy; override;
    function AddColumn(const ColumnName: string; const Col: Integer = -1):
        TColumnItem;
    procedure Clear;
    function ColumnByName(const ColumnName: string): TColumnItem;
    function ColumnExists(ColName: string): Boolean;
    property ColumnItem[Index: Integer]: TColumnItem read GetColumnItem;
    published
  end;



  { TCsvReader }

  TCsvReader = class(TPersistent)
    strict private
    procedure InitBuffer;
  private
    FFreeCharLength: int64;
    FBuffer: Tbytes;
    FCharLength: byte;
    FCSVDataRow: TCSVDataRow;
    FEnCode: TCode;
    FColumns: TColumns;
    FCurrentPos: Int64;
    FDataEnd: Boolean;
    FFileSize: int64;
		FDataPos: int64;
    FPLineEnd: PAnsiChar;
    FPLineStart: PAnsiChar;
    FPEnd: PAnsiChar;
    FPLastLF: PAnsiChar;
    FPStart: PAnsiChar;
    FS: TFileStream;
    FSplitChar: AnsiChar;
    function GetColCount: Integer;
    function GetPCSVDataItem(Index: Integer): PCsvDataItem;
    function GetCSVDataRow(Index: Integer): string;
    procedure ParserData(const PS, PE: PAnsiChar);
    procedure ReadHeader(const PS, PE: PAnsiChar);
    function ReadRow: Boolean;
    function ReadToBuffer: Boolean;
    procedure SetColCount(const Value: Integer);
    function CalBufferSize(PackageCount,FileSize:int64):Int64;
    function GetBufferCount:int64;
  public
    constructor Create();
    destructor Destroy; override;
    function BuildRawString(PS, PE: PAnsiChar): RawByteString;
    function GetRowString: rawbytestring;
    function ReadLine: Boolean;
    procedure OpenFile(const CSVFile: string; LoadHeader: Boolean = true; BufferSize:int64=0);  //buffersize=0 auto cal buffersize;
    function ReadUnicodeString(const Utf8Str: RawByteString): string;
    function GetBuffsize:int64;
    procedure SetHeaderCount(HeaderCount: Integer);
    procedure BufferSeek(BufferIndex:integer);
		function ForeCastBufferCount: int64;
    function GetSize:int64;
		procedure MoveToFirst;
    property CharLength: byte read FCharLength write FCharLength;
    property ColCount: Integer read GetColCount write SetColCount;
    property CSVDataRow[Index: Integer]: string read GetCSVDataRow;
    property EnCode: TCode read FEnCode write FEnCode;
    property Columns: TColumns read FColumns;
    property PCSVDataItems[Index: Integer]: PCsvDataItem read GetPCSVDataItem;
    property PLineEnd: PAnsiChar read FPLineEnd;
    property PLineStart: PAnsiChar read FPLineStart;
    property SplitChar: AnsiChar read FSplitChar write FSplitChar;
    property BufferSize:int64 Read GetBuffsize;
    property Size:int64 read GetSize;
    property BufferCount:int64 read GetBufferCount;
  published
    function LineIsUTF8: Boolean;
    procedure ProcBuffer(const Index: Integer);
  end;
  //快速预览CSV
  TCSVFastView=class(TPersistent)

  end;

  { TCSVIndex }

  TCSVIndex =class(TObject)
    //
  public
    constructor Create;virtual;
    destructor Destroy;virtual;
    procedure CreateIndex(CSVR:TCsvReader;FileName:string);
  end;




 function ConvertString(const RawString: RawByteString; const Code: TCode):
  ansistring;

implementation


function ConvertString(const RawString: RawByteString; const Code: TCode):
        ansistring;
begin

  if Code=cUtf8 then
     Result := UTF8Decode(RawString)
   else
     Result :=RawString;
end;

{ TCSVIndex }

constructor TCSVIndex.Create;
begin
  inherited;
end;

destructor TCSVIndex.Destroy;
begin
  inherited;
end;

procedure TCSVIndex.CreateIndex(CSVR: TCsvReader; FileName: string);
begin
  // 建立索引文件 文件

end;

{TColumns}
constructor TColumns.Create(AItemClass: TCollectionItemClass);
begin
  inherited ;
  FHash := TObjectHash.Create(4096);
end;

destructor TColumns.Destroy;
begin
  FreeAndNil(FHash);
  inherited Destroy;
end;

function TColumns.AddColumn(const ColumnName: string; const Col: Integer = -1):
    TColumnItem;
var

  ColName:string;
begin
  ColName :=ColumnName;
  ColName :=ReplaceStr(ColName,#13,'');
  ColName :=ReplaceStr(ColName,#10,'');
  result :=FHash.ValueOf(UpperCase(ColName)) as TColumnItem;
  if not Assigned(result) then
  begin
    result :=TColumnItem.Create(Self);
    result.ColumnName :=ColumnName;
    if Col=-1 then
      result.Col :=result.Index +1
    else
      result.Col :=Col;
    FHash.AddObject(UpperCase(colName),result);
  end;
end;

procedure TColumns.Clear;
begin
	FHash.Clear;
 	(Self as TCollection).Clear;
end;

function TColumns.ColumnByName(const ColumnName: string): TColumnItem;
var
  Index:Integer;
begin
  result :=FHash.ValueOf(UpperCase(ColumnName)) as TColumnItem;
end;

function TColumns.ColumnExists(ColName: string): Boolean;
begin
  result :=self.FHash.Exits(UpperCase(ColName));
end;

function TColumns.GetColumnItem(Index: Integer): TColumnItem;
begin

  Result := self.Items[Index] as TColumnItem;
end;
{TCSVReader}
constructor TCsvReader.Create();
begin
  inherited Create;
  FPLineStart :=nil;
  FPLineEnd :=nil;
  FCharLength :=1;
  FColumns :=TColumns.Create(TColumnItem);
  FSplitChar :=',';

end;
function TCsvReader.GetBuffsize:int64;
begin
  //
  result :=Length(FBuffer);
end;

destructor TCsvReader.Destroy;
begin
  FreeAndnil(FColumns);
  if Assigned(FS) then
    FreeAndNil(FS);
  inherited ;
end;

function TCsvReader.BuildRawString(PS, PE: PAnsiChar): RawByteString;

begin
  SetLength(result,PE-PS+1);
  Move(PS^,result[1],PE-PS+1);

end;

function TCsvReader.GetColCount: Integer;
begin
  Result :=FColumns.Count ;
end;

function TCsvReader.GetPCSVDataItem(Index: Integer): PCsvDataItem;
begin
	Result :=@FCSVDataRow[Index] ;
end;

function TCsvReader.GetCSVDataRow(Index: Integer): string;
begin
  Result :=ConvertString( FCSVDataRow[Index].AsRawString ,FEnCode);
end;

function TCsvReader.GetRowString: rawbytestring;
begin
	Result :=BuildRawString(FPLineStart,FPLineEnd);
	// TODO -cMM: TCsvReader.GetRowString default body inserted
end;

procedure TCsvReader.InitBuffer;
begin
	FPEnd :=@FBuffer[Length(FBuffer)-1];
	FPStart :=@FBuffer[0];
	FEnCode :=cAnsi;
	FillChar(FBuffer[0],Length(FBuffer),$0);
end;

function TCsvReader.LineIsUTF8: Boolean;
var
	raw:RawByteString;
begin
	raw :=BuildRawString(PLineStart,PLineEnd);
  if raw='' then
  begin	
 		Result :=false; 
  end else
  if UTF8Decode(raw)<>'' then
  begin
  	result := true
  end else
  begin
    result :=true;
  end;
end;

function TCsvReader.ReadLine: Boolean;
begin
  Result :=ReadRow ;
  if result then
  begin
    ParserData(FPLineStart,FPLineEnd);
  end;

end;

procedure TCsvReader.OpenFile(const CSVFile: string; LoadHeader: Boolean;
  BufferSize: int64);

begin
	//数据开始位置
  FDataPos :=0;
  if Assigned(FS) then FreeAndnil(FS);
  if LoadHeader then
  begin
    FColumns.Clear;
  end;
  FS :=TFileStream.Create(CSVFile,fmOpenRead);
  //初始化缓冲区
  if BufferSize>0 then
  begin
    SetLength(Fbuffer,BufferSize);
    InitBuffer;
  end else
  begin
    BufferSize :=CalBufferSize(1000,FS.Size);
    if BufferSize<DEFAULT_BUFFER_SIZE then
    begin
      BufferSize :=DEFAULT_BUFFER_SIZE;
    end;
    if BufferSize>FS.Size then
    begin
      BufferSize :=FS.Size;
    end;
    SetLength(FBuffer,BufferSize);
    InitBuffer;

  end;
  FDataEnd :=False;
  FFileSize :=Fs.Size;
  FCurrentPos :=FS.Position;
  FFreeCharLength :=0;
  ReadToBuffer;
  if LoadHeader then
  begin
    ReadRow;
    ReadHeader(FPLineStart,FPLineEnd);
    //跳过header 数据位置
    FDataPos :=FPLineEnd-FPLineStart+1;
    
  end else
  begin
  	//不加载header 数据开始位置为0
    FDataPos :=0;
  end;
end;

procedure TCsvReader.ParserData(const PS, PE: PAnsiChar);
var
  State:TColState;
  PPos:PAnsiChar;
  PColStart,PColEnd:PAnsiChar;
	BlnColFirstChar,BlnInQuot:Boolean; //blnInQuto: 在双引号中 
  index :integer;
begin
  Index :=0;
  State :=colStart;
  BlnColFirstChar:=true;
  PPos :=PS;
  PColStart :=PPos;
  BlnInQuot :=false;  
  while State <> cLEnd do
  begin
    case State of
      colStart:
      begin

        if PPos<PE then
        begin
          if (PPos^='"') and BlnColFirstChar then
          begin
            Inc(PPos);
            //PColStart :=PPos;
            BlnColFirstChar :=False;
            BlnInQuot :=True;
          end else
          //if (PPos^=FSplitChar) and ((PPos-FCharLength)^ ='"') then   
          if (PPos^='"') and ((PPos+FCharLength)^ =SplitChar) and BlnInQuot  then
          begin
            PColEnd :=PPos-FCharLength;
            State :=colEnd;
            Inc(PPos,2);
            BlnInQuot :=false;
          end else
   				if (PPos^=FSplitChar) and (not BlnInQuot) then
          begin
            PColend :=PPos-1;
            State :=colEnd;
            Inc(PPos);
          end else
          begin
            Inc(PPos);
          end;
        end else
        begin
          PPos :=PE;
          PColend :=PPos-1;
          state :=colEnd;

        end;

      end;
      colEnd:
      begin
      	if Index >= FColumns.Count then
        begin
          //
          Exit;
        end;
        FCSVDataRow[Index].PS :=PColStart;
        FCSVDataRow[Index].PE :=PColend;
        Inc(Index);
        PColStart :=PPos;
        BlnColFirstChar :=true;
        if PPos<PE then
        begin
          State :=colStart;
          PColStart :=PPos;
        end else
        begin
          State :=cLEnd;
        end;
      end
    end;
  end;

end;

procedure TCsvReader.ProcBuffer(const Index: Integer);
begin
  while Index<Length(Fbuffer)  do
  begin

  end;

end;

procedure TCsvReader.ReadHeader(const PS, PE: PAnsiChar);
var
  State:TColState;
  ColName:string;
  PPos:PAnsiChar;
  PColStart,PColend:PAnsiChar;
  BlnColFirstChar,BlnInQuot:Boolean; //blnInQuto: 在双引号中 
  I: Integer;
  
begin
  State :=colStart;
  BlnColFirstChar:=true;
  PPos :=PS;
  SetLength(FCSVDataRow,0);
  PColStart :=PS;
  BlnInQuot :=false;
  while State <> cLEnd do
  begin
    case State of
      colStart:
      begin
        if PPos<PE then
        begin
          if (PPos^='"') and BlnColFirstChar then
          begin
            Inc(PPos);
            PColStart :=PPos;
            BlnColFirstChar :=False;
            BlnInQuot :=True;

          end else
          if BlnColFirstChar then
          begin
          	PColStart :=PPos;
            BlnColFirstChar :=False;
          end else
          if (PPos^=FSplitChar) and ((PPos-FCharLength)^ ='"') and BlnInQuot  then
          begin
            PColEnd :=PPos-FCharLength*2;
            State :=colEnd;
            Inc(PPos);
            BlnInQuot :=False;
           end else
          if (PPos^=FSplitChar) and (not BlnInQuot) then
          begin
            PColend :=PPos-1;
            State :=colEnd;
            Inc(PPos);
          end else
          begin
            Inc(PPos);
          end;
        end else
        begin
          PPos :=PE;
          PColend :=PPos-1;
          state :=colEnd;

        end;

      end;
      colEnd:
      begin
      	if (PcolEnd-PColStart)>0 then
        begin
        	ColName :=ConvertString( BuildRawString(PColStart,PColEnd),FEnCode);
        end else
        begin
          ColName :='Column_'+IntTostr(FColumns.Count );
        end;
        if FColumns.ColumnExists(ColName) then
        begin
          ColName :='Column_'+IntTostr(FColumns.Count );
        end;
        FColumns.AddColumn(ColName);
        SetLength(FCSVDataRow,Length(FCSVDataRow)+1);
        PColStart :=PPos;
        BlnColFirstChar :=true;
        if PPos<PE then
        begin
          State :=colStart;
        end else
        begin
          State :=cLEnd;
        end;
      end
    end;
  end;

  for I := 0 to FColumns.Count-1 do
  begin
    FColumns.ColumnItem[I].PCsvColData :=@FCSVDataRow[I];
  end;




end;

function TCsvReader.ReadRow: Boolean;
var
  state:TRowState;
  PPos:PAnsiChar;
begin
  //
  if FDataEnd then
  begin
    result :=false;
    exit;
  end;

  if FPLastLF=nil then
  begin
    PPos :=FPStart;
  end else
  begin
    PPos :=FPLastLF +1;
  end;
  FPLineStart :=PPos;
  state :=rStart;
  //PLF :=@Fbuffer[FStart];
  while State<>rLEnd do
  begin
    case state of
      rStart:
        begin
          if (PPos^=#10)  then
          begin
            if (PPos-1)^=#13 then
            begin
              FPLineEnd :=PPos-1*FCharLength;
            end else
            begin
              FPLineEnd :=PPos;
            end;
            state :=rLEnd;
            FPLastLF :=PPos;
          end else
          if PPos^=#0 then //空字符串
          begin
               PPos :=FPEnd;
               State :=rLend;
          end else
          if PPos>=FPEnd then
          begin
            State :=rLEnd;
            PPos :=FPEnd;
          end else
          begin
            Inc(PPos,FCharLength);
          end;
        end;
        rLEnd:
        begin
          Continue;
        end;
    end;

  end;

  if PPos=FPEnd  then
  begin

    if FCurrentPos < FFileSize then
    begin
      FFreeCharLength :=FPEnd-FPLastLF;
      Move((FPLastLF+1)^,FPstart^,FPEnd-FPLastLF);
      FillChar((FPStart+FFreeCharLength)^,(FPEnd-(FPstart+FFreeCharLength)+1),$0);
      ReadToBuffer;
      FPLineStart :=FPStart;
      Result :=ReadRow;
      {if FFreeCharLength>0 then
      begin
      	Result :=ReadRow;
      end else
      begin
        result :=true;
      end;}
    end else
    begin
    	
      FPLineEnd :=FPEnd;
      FPLastLF :=FPEnd;
      result :=true;
      FDataEnd :=True;
    end;
  end else
  begin
    result :=true;
  end;



end;

function TCsvReader.ReadToBuffer: Boolean;
var
  ReadSize: Int64;
begin

  ReadSize :=FFileSize-FCurrentPos;
  if ReadSize >0 then
  begin
    if Length(FBuffer)< ReadSize then
    begin
      if FFreeCharLength>0 then
      begin
        FS.Read(Fbuffer[FFreeCharLength],Length(FBuffer)-FFreeCharLength);
        FFreeCharLength :=0;
      end else
      begin
        FS.Read(FBuffer[0],Length(FBuffer));
      end;
    end else
    begin
      FS.Read(FBuffer[0],ReadSize);
      FPEnd :=FPStart+ReadSize-1;
    end;

    result :=true;
    FPLastLF :=nil;
  end else
  begin
    result :=false;
  end;
  FCurrentPos :=Fs.Position;

end;

function TCsvReader.ReadUnicodeString(const Utf8Str: RawByteString): string;
begin
  result :=UTF8Decode(Utf8Str);
end;

procedure TCsvReader.SetColCount(const Value: Integer);
var
  I: Integer;
  Col:TColumnItem;
begin
  FColumns.Clear;
  SetLength(FCSVDataRow,Value);
  for I := 1 to Length(FCSVDataRow) do
  begin
    Col :=FColumns.AddColumn('Column '+Inttostr(I));
    Col.PCsvColData :=@FCsvDataRow[I-1];
  end;
end;

function TCsvReader.CalBufferSize(PackageCount, FileSize: int64): Int64;
begin
  result :=FileSize div PackageCount;
end;

function TCsvReader.GetBufferCount: int64;
var
  BufSize:int64;
  FileSize:int64;
begin
  if Assigned(FS) then
  begin
    BufSize :=BufferSize;
    FileSize :=Fs.Size;
    if (FileSize mod BufSize ) =0 then
    begin
         result :=FileSize div BufSize;
    end else
    begin
      result :=(FileSize div BufSize)+1;
    end;
  end else
  begin
    result :=-1;
  end;
end;

procedure TCsvReader.SetHeaderCount(HeaderCount: Integer);
begin
	setLength(FCSVDataRow,HeaderCount);
end;

procedure TCsvReader.BufferSeek(BufferIndex: integer);
begin
  //
end;

function TCsvReader.ForeCastBufferCount: int64;
var
	LineSize:int64;
  AvgLineSize:Double;
  cnt:Integer;
begin
	if Assigned(FS) then
  begin
  	cnt :=0;
  	LineSize :=0;	
  	while ReadLine do
    begin
    	LineSize :=LineSize + FPLineEnd- FPLineStart;

      Inc(cnt);
      if cnt>= 1000 then
      begin
        break;
      end;
    end;
    AvgLineSize :=LineSize/ cnt;
    result :=Round(FS.Size/AvgLineSize);

  end else
  begin
  	result :=-1;
  end;
	

end;

function TCsvReader.GetSize: int64;
begin
  //
  if Assigned(FS) then
  begin
    result :=fs.Size;
  end else
  begin
    result :=-1;
  end;
end;

procedure TCsvReader.MoveToFirst;
begin
  InitBuffer;
  FS.Position :=FDataPos;	
end;

function TCsvDataItem.AsRawString: RawByteString;
begin
	if PE-PS>0 then
  begin
  	SetLength(result,PE-PS+1);
  	Move(PS^,result[1],PE-PS+1);
  end else
  begin
    result :='';
  end;
end;

function TCsvDataItem.AsUtf8: UTF8String;
begin
	if PE-PS>0 then
	begin
		SetLength(result,PE-PS+1);
		Move(PS^,result[1],PE-PS+1);
	end else
	begin
		result :='';
	end;
end;

procedure TColumnItem.SetPCsvColData(const Value: PCsvDataItem);
begin
  FPCsvColData := Value;
end;



end.
